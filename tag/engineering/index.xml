<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>engineering | μβ</title>
    <link>https://matbesancon.xyz/tag/engineering/</link>
      <atom:link href="https://matbesancon.xyz/tag/engineering/index.xml" rel="self" type="application/rss+xml" />
    <description>engineering</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 27 Dec 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://matbesancon.xyz/media/icon_hu7565e292f0a230f950fabd03a1d7dda9_12642_512x512_fill_lanczos_center_3.png</url>
      <title>engineering</title>
      <link>https://matbesancon.xyz/tag/engineering/</link>
    </image>
    
    <item>
      <title>Winter warm-up: toy models for heat exchangers</title>
      <link>https://matbesancon.xyz/post/2018-12-27-heat-exchanger/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://matbesancon.xyz/post/2018-12-27-heat-exchanger/</guid>
      <description>&lt;p&gt;Enjoying the calm of the frozen eastern French countryside for the last week of 2018,
I was struck by nostalgia while reading a SIAM news article [1] on a
near-reversible heat exchange between two flows and decided to dust off my
thermodynamics books (especially [2]).&lt;/p&gt;
&lt;p&gt;Research in mathematical optimization was not the
obvious path I was on a couple years ago. The joint bachelor-master&amp;rsquo;s program
I followed in France was in process engineering, a discipline crossing
transfer phenomena (heat exchange, fluid mechanics, thermodynamics), control,
knowledge of the matter transformations at hand
(chemical, biochemical, nuclear reactions) and industrial engineering
(see note at the end of this page).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hypotheses&lt;/strong&gt; Throughout the article, we will use a set of flow hypotheses
which build up the core of our model for heat exchange.
These can seem odd but are pretty common in process engineering and
realistic in many applications.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The two flows advance in successive &amp;ldquo;layers&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Each layer has a homogeneous temperature; we therefore ignore boundary layer effects.&lt;/li&gt;
&lt;li&gt;Successive layers do not exchange matter nor heat. The rationale behind this
is that the temperature difference between fluids is significantly higher than between layers.&lt;/li&gt;
&lt;li&gt;Pressure losses in the exchanger does not release a significant heat compared to
the fluid heat exchange.&lt;/li&gt;
&lt;li&gt;The fluid and wall properties are constant with temperature.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;starting-simple-parallel-flow-heat-exchange&#34;&gt;Starting simple: parallel flow heat exchange&lt;/h2&gt;
&lt;p&gt;In this model, both flows enter the exchanger on the same side, one at a
hot temperature, the other at a cold temperature. Heat is exchanged along the
exchanger wall, proportional at any point to the difference in temperature
between the two fluids. We therefore study the evolution of two variables
$u_1(x)$ and $u_2(x)$ in an interval $x \in [0,L]$ with $L$ the length of
the exchanger.&lt;/p&gt;
&lt;p&gt;In any layer $[x, x + \delta x]$, the heat exchange is equal to:
$$\delta \dot{Q} = h \cdot (u_2(x) - u_1(x)) \cdot \delta x$$
with $h$ a coefficient depending on the wall heat exchange properties.&lt;/p&gt;
&lt;p&gt;Moreover, the variation in internal energy of the hot flow is equal to
$\delta \dot{Q}$ and is also expressed as:&lt;/p&gt;
&lt;p&gt;$$ c_2 \cdot \dot{m}_2 \cdot (u_2(x+\delta x) - u_2(x)) $$
$c_2$ is the calorific capacity of the hot flow and  $\dot{m}_2$ its
mass flow rate. The you can check that the given expression is a power.
The same expressions apply to the cold flow.
Let us first assume the following:&lt;/p&gt;
&lt;p&gt;$$c_2 \cdot \dot{m}_2 = c_1 \cdot \dot{m}_1$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; DifferentialEquations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; DiffEq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DifferentialEquations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Plots
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; parallel_exchanger(du,u,p,x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# heat exchange coefficient&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (u[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;u[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    du[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    du[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; parallel_solution(L, p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    problem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ODEProblem(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      parallel_exchanger, &lt;span style=&#34;color:#75715e&#34;&gt;# function describing the dynamics of the system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      u₀,                 &lt;span style=&#34;color:#75715e&#34;&gt;# initial conditions u0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, L),            &lt;span style=&#34;color:#75715e&#34;&gt;# region overwhich the solution is built, x ∈ [0,L]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      p,                  &lt;span style=&#34;color:#75715e&#34;&gt;# parameters, here the aggregated transfer constant h&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solve(problem, DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tsit5())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot(parallel_solution([&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$$ u_1(x) = T_{eq} \cdot (1 - e^{-h\cdot x}) $$
$$ u_2(x) = (100 - T_{eq}) \cdot e^{-h\cdot x} + T_{eq} $$&lt;/p&gt;
&lt;p&gt;With $T_{eq}$ the limit temperature, trivially 50°C with equal flows.&lt;/p&gt;
&lt;p&gt;(Full disclaimer: I&amp;rsquo;m a bit rusty and had to double-check for errors)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This model is pretty simple, its performance is however low from
a practical perspective. First on the purpose itself, we can compute for two
fluids the equilibrium temperature. This temperature can be adjusted
by the ratio of two mass flow rates but will remain a weighted average.
Suppose the goal of the exchange is to heat the cold fluid, the necessary
mass flow $\dot{m}_2$ tends to $\infty$ as the targeted temperature tends to
$u_2(L)$, and this is independent of the performance of the heat exchanger
itself, represented by the coefficient $h$. Here is the extended model using
the flow rate ratio to adjust the temperature profiles:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; DifferentialEquations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; DiffEq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DifferentialEquations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ratio_exchanger(du,u,p,x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# heat exchange coefficient&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# ratio of mass flow rate 2 / mass flow rate 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (u[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;u[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    du[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    du[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Q &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ratio_solution(u₀, L, p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    problem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ODEProblem(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ratio_exchanger, &lt;span style=&#34;color:#75715e&#34;&gt;# function describing the dynamics of the system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      u₀,              &lt;span style=&#34;color:#75715e&#34;&gt;# initial conditions u0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.&lt;/span&gt;, L),         &lt;span style=&#34;color:#75715e&#34;&gt;# region overwhich the solution is built, x ∈ [0,L]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      p,               &lt;span style=&#34;color:#75715e&#34;&gt;# parameters, here the aggregated transfer constant h&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solve(problem, DiffEq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Tsit5())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (idx,r) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; enumerate((&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;500.0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    plot(ratio_solution([&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.05&lt;/span&gt;, r)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xlabel!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x (m)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ylabel!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T °C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parallel flow with ratio &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    savefig(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parallel_ratio_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(idx)&lt;span style=&#34;color:#e6db74&#34;&gt;.pdf&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This model has an analytical closed-form solution given by:
$$ T_{eq} = \frac{100\cdot \dot{m}_2}{\dot{m}_1 + \dot{m}_2} = 100\cdot\frac{r}{1+r} $$
$$ u_1(x) = T_{eq} \cdot (1 - e^{-h\cdot x}) $$
$$ u_2(x) = (100 - T_{eq}) \cdot e^{-h\cdot x \cdot r} + T_{eq} $$&lt;/p&gt;
&lt;h2 id=&#34;opposite-flow-model&#34;&gt;Opposite flow model&lt;/h2&gt;
&lt;p&gt;This model is trickier because we don&amp;rsquo;t consider the dynamics of the system
along one dimension anymore. The two fluids flowing in opposite directions
are two interdependent systems. We won&amp;rsquo;t go through the analytical solution
but use a similar discretization as in article [1].&lt;/p&gt;
&lt;p&gt;This model takes $n$ discrete cells, each considered at a given temperature.
Two cells of the cold and hot flows are considered to have exchanged heat
after crossing.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Applying the energy conservation principle, the gain of internal energy
between cell $k$ and $k+1$ for the cold flow is equal to the loss of
internal energy of the hot flow from cell $k+1$ to cell $k$. These differences
come from heat exchanged, expressed as:&lt;/p&gt;
&lt;p&gt;$$\dot{Q}_k = h \cdot \Delta x \cdot (u_{2,k+1} - u_{1,k}) $$
$$\dot{Q}_k = \dot{m}_1 \cdot c_1 \cdot (u_{1,k+1} - u_{1,k}) $$
$$\dot{Q}_k = \dot{m}_2 \cdot c_2 \cdot (u_{2,k+1} - u_{2,k}) $$&lt;/p&gt;
&lt;p&gt;Watch out the sense of the last equation since the heat exchange is
a loss for the hot flow. Again we use the simplifying assumption of
equality of the quantities:
$$ \dot{m}_i \cdot c_i $$&lt;/p&gt;
&lt;p&gt;Our model only depends on the number of discretization steps $n$
and transfer coefficient $h$.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; discrete_crossing(n, h; itermax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Matrix&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}(undef, itermax, n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Matrix&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}(undef, itermax, n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u1[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u2[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;,n] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; iter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;itermax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            δq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (u2[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; u1[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u2[iter, k]   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u2[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; δq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u1[iter, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u1[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k]   &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; δq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (u1,u2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; (a1, a2) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; discrete_crossing(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; x0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, stop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plot(x0, a1[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u1 final&amp;#34;&lt;/span&gt;, legend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:topleft&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot!(p, x0, a2[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u2 final&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; iter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    plot!(p, x0, a1[iter,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u1 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(iter)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    plot!(p, x0, a2[iter,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u2 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(iter)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xlabel!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x (m)&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can observe the convergence of the solution at different iterations:
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;After convergence, we observe a parallel temperature profiles along the
exchanger, the difference between the two flows at any point being reduced
to $\epsilon$ mentioned in article [1]. The two differences between our model
and theirs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The discretization grid is slightly different since we consider the exchange
to happen between cell $k$ and cell $k+1$ at the node between them, while they
consider an exchange between $k-1$ and $k+1$ at cell $k$.&lt;/li&gt;
&lt;li&gt;They consider two flow unit which just crossed reach the same temperature,
while we consider a heat exchange limited by the temperature difference
(the two flows do not reach identical temperatures but tend towards it).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally we can change the ratio:
$$\frac{\dot{m}_1\cdot c_1}{\dot{m}_2\cdot c_2}$$ for the counterflow model
as we did in the parallel case.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; discrete_crossing(n, h, ratio; itermax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Matrix&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}(undef, itermax, n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Matrix&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;Float64&lt;/span&gt;}(undef, itermax, n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u1[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u2[&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;,n] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;.=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; iter &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;itermax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            δq &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; h &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (u2[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; u1[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u2[iter, k]   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u2[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; δq &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ratio
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u1[iter, k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u1[iter&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k]   &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; δq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (u1,u2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Julia tip&lt;/em&gt;: note that we do not define a new function for this but
create a &lt;strong&gt;method&lt;/strong&gt; for the function &lt;code&gt;discrete_crossing&lt;/code&gt; defined above
with a new signature &lt;code&gt;(n, h, ratio)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can plot the result:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; x0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;, length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, stop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; plot(x0, a1[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u1 ratio 1.0&amp;#34;&lt;/span&gt;, legend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:bottomright&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plot!(p, x0, a2[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u2 ratio 1.0&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ratio &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (r1, r2) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; discrete_crossing(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;, ratio)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    plot!(p, x0, r1[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u1 ratio &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(ratio)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    plot!(p, x0, r2[&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;], label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u2 ratio &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;(ratio)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xlabel!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x (m)&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To keep this post short, we will not show the influence of all parameters.
Some key effects to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increasing $h$ increases the gap between the flow temperatures&lt;/li&gt;
&lt;li&gt;Increasing the number of steps does not change the result for a step size
small enough&lt;/li&gt;
&lt;li&gt;Increasing the exchanger length reduces the gap&lt;/li&gt;
&lt;li&gt;A ratio of 1 minimizes the temperature difference at every point
(and thus minimizes the entropy). This very low entropy creation is a positive
sign for engineers from a thermodynamics point of view: we are not &amp;ldquo;degrading&amp;rdquo;
the &amp;ldquo;quality&amp;rdquo; of available energy to perform this heat exchange or in other
terms, we are not destroying &lt;a href=&#34;https://en.wikipedia.org/wiki/Exergy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exergy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to reach out on &lt;a href=&#34;https://twitter.com/matbesancon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;
or via email if you have comments or questions, I&amp;rsquo;d be glad to take both.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Note on process engineering&lt;/em&gt;
The term is gaining more traction in English, and should replace
chemical engineering in higher education to acknowledge the diversity of
application fields, greater than the chemical industry alone.
The German equivalent &lt;em&gt;Verfahrenstechnik&lt;/em&gt; has been used for decades and
&lt;em&gt;Génie des Procédés&lt;/em&gt; is now considered a norm in most French-speaking
universities and &lt;a href=&#34;https://en.wikipedia.org/wiki/Soci%C3%A9t%C3%A9_Fran%C3%A7aise_de_G%C3%A9nie_des_Proc%C3%A9d%C3%A9s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;consortia&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Edit: thanks BYP for the sharp-as-ever proofreading&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Sources:&lt;/p&gt;
&lt;p&gt;[1] Levi M. A Near-perfect Heat Exchange. SIAM news. 2018 Dec;51(10):4.&lt;/p&gt;
&lt;p&gt;[2] Borel L, Favrat D. Thermodynamique et énergétique. PPUR presses polytechniques; 2nd edition, 2011.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Image sources:
[3] Geogebra&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bringing data science to engineers</title>
      <link>https://matbesancon.xyz/post/2016-05-21-bringing-data-science-engineers/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      <guid>https://matbesancon.xyz/post/2016-05-21-bringing-data-science-engineers/</guid>
      <description>&lt;p&gt;The goal of this article is to present couple challenges waiting the industrial
data scientist or industrial data science teams, the deep reasons I believe are
the root of this inertia, based on my experience (in both data science and
engineering projects) and exchanges with engineers and data scientists. The
last part introduces some suggestions to make the collaboration richer for
both sides.&lt;/p&gt;
&lt;h2 id=&#34;why-isnt-data-science-already-everywhere-in-engineering&#34;&gt;Why isn&amp;rsquo;t data science already everywhere in engineering?&lt;/h2&gt;
&lt;p&gt;It is surprising that this transition hasn&amp;rsquo;t been so spontaneous. Indeed, one
could think that engineers, belonging to the &amp;ldquo;STEM family&amp;rdquo; (people studying or
working in fields related to Science, Technology, Engineering and Mathematics)
would easily embrace the concepts and methods of data science and moreover be
able to identify the potential gains, savings and improvements to carry out
complex projects in a more effective manner.&lt;/p&gt;
&lt;h3 id=&#34;silo-thinking-in-stem&#34;&gt;Silo thinking in STEM&lt;/h3&gt;
&lt;p&gt;That&amp;rsquo;s not the case, most engineers I&amp;rsquo;ve been discussing and working with never
considered these techniques as relevant to their current tasks. So why so
little enthusiasm? A recurrent problem I noticed is the silo thinking of
disciplines created by strong and early specializations, along with natural
distaste and reduction of unknown fields.&lt;/p&gt;
&lt;h3 id=&#34;were-not-google-deal-with-it&#34;&gt;We&amp;rsquo;re not Google, deal with it&lt;/h3&gt;
&lt;p&gt;So when someone will first pitch machine learning to an engineer, I would often
observe reactions of &amp;ldquo;it&amp;rsquo;s not relevant to my field/work/issues&amp;rdquo; because they
don&amp;rsquo;t consider being in a &amp;ldquo;tech&amp;rdquo; industry. This is the same reaction type
observed in companies facing digital disruption (see the excellent article of
Nicolas Colin
&lt;a href=&#34;http://www.thefamily.co/hot-news/the-five-stages-of-denial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As a personal example, as I was talking to a production manager about the
impact advanced predictive analytics could have on machine reliability and
availability, she advanced the &amp;ldquo;non-tech&amp;rdquo; argument, to which I answered with
examples of traditional manufacturing companies already using these techniques,
including General Electric for turbine monitoring (what they refer to as the
Industrial Internet). His last point was &amp;ldquo;Well sure but&amp;hellip; we&amp;rsquo;re not GE&amp;rdquo;, which
I understood as &amp;ldquo;I&amp;rsquo;m not able to learn from nor to work in that field totally
out of my comfort zone&amp;rdquo;. Although, her discomfort with the methods involved is
easily understandable since it requires key concepts in mathematics, statistics
and algorithm thinking which would often be considered as theory unusable in
their &amp;ldquo;real life&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;my-subject-is-so-complex&#34;&gt;My subject is so complex&lt;/h3&gt;
&lt;p&gt;The other reaction one would observe is linked to an interesting thinking
process: People always tend to reduce the breadth of subjects they don&amp;rsquo;t know,
and to emphasize (not to say oversize) the width and complexity of their own
domain. I recently read a &amp;ldquo;conversation hack&amp;rdquo; to make a conversation pleasant
to someone, in three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ask them what they do for a living&lt;/li&gt;
&lt;li&gt;Ask them some more details about how they manage things&lt;/li&gt;
&lt;li&gt;Look impressed, add &amp;ldquo;Wow, that sounds very complex&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;People don&amp;rsquo;t feel at ease with the introduction of quantitative, rational
methods and analytics for decision-making in their daily work because this
implies that a rather &amp;ldquo;simple&amp;rdquo; model can generate better decisions than them.
It revives this old phobia of losing their job to a machine.&lt;/p&gt;
&lt;h3 id=&#34;but-still-why-particularly-engineers&#34;&gt;But still&amp;hellip; why particularly engineers?&lt;/h3&gt;
&lt;p&gt;We didn&amp;rsquo;t address this question yet, and it still sounds counter-intuitive,
given our first statements. From my personal experience studying and working
with both junior and senior engineers, and relatively to business or social
science background, there is a stronger will to &amp;ldquo;master the model&amp;rdquo; and
understand most key aspects of the system they work on.&lt;/p&gt;
&lt;p&gt;Bank managers, marketing leaders or finance analysts totally feel comfortable
with the use of data base systems and business intelligence tools, even
statistical analyses or predictive modeling tools they can perfectly leverage,
but not often understand on the technical parts. They would just need to be
able to read, use and trust the results. Engineers, on the other hand don&amp;rsquo;t
feel legitimate when using tools they don&amp;rsquo;t master they feel the need of
understanding and controlling what&amp;rsquo;s going on under the hood.&lt;/p&gt;
&lt;p&gt;There is a common vision of the engineers in several cultures, they are the
handy people, able to answer most of your questions, master all techniques from
nuclear power generation to bio-technologies. They are all supposed to be Tony
Stark (or Elon Musk in a more realistic way). So their secret fear is not about
being afraid of getting their job &amp;ldquo;automated&amp;rdquo; but more about a situation where
they cannot handle their system anymore because a part of the decisions taken
is not under their control anymore.&lt;/p&gt;
&lt;h2 id=&#34;what-to-do-about-it&#34;&gt;What to do about it?&lt;/h2&gt;
&lt;h3 id=&#34;what-data-science-can-bring-to-their-organization&#34;&gt;What data science can bring to their organization&lt;/h3&gt;
&lt;p&gt;Proving the utility of data science is the easy part, the process is actually
almost identical to bringing data science to any other industry. The potential
users should be shown what pain points this new field would address in their
business, how similar businesses have already applied machine learning to
their issues, and how the processes should be adapted to these projects.&lt;/p&gt;
&lt;h3 id=&#34;how-it-actually-works&#34;&gt;How it actually works&lt;/h3&gt;
&lt;p&gt;Empowering the engineers through explanations of the key concepts might be
seemingly pointless and time-consuming, but helps them accepting the
techniques involved as a part of the &amp;ldquo;internal model&amp;rdquo; secretly hidden in each
engineer&amp;rsquo;s mind and used to think about their system and make decisions upon
it.&lt;/p&gt;
&lt;p&gt;Most engineers are usually used to (at least) basic algorithm structures. So
using it to make them understand the thinking pattern behind machine learning
may help them to understand the mechanisms and feel at ease with reapplying
it. Once you&amp;rsquo;ve covered the fundamentals, a modeling skill should be
developed. Indeed, being able to model a problem as a data science project
will give a pretty straightforward beginning (especially on variable
selections or feature engineering).&lt;/p&gt;
&lt;p&gt;Basic linear regression (and in general other curve fitting methods) have
already been seen for experimental purposes in most engineering fields. If one
has only time to explain key concepts, I would give the following order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Classification principles, example of classification trees.&lt;/li&gt;
&lt;li&gt;Regression techniques (if not already known). Simple and multivariate linear regression, polynomial regression.&lt;/li&gt;
&lt;li&gt;Unsupervised learning, example of k-means clustering.&lt;/li&gt;
&lt;li&gt;Overfitting, cross-validation concept and techniques.&lt;/li&gt;
&lt;li&gt;Ensemble learning, example of random forests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With clear but complete explanations of regression, classification and
unsupervised learning, along with a previous knowledge of regression
techniques, most engineers will be able to identify opportunities to get
deeper insights into the phenomena they investigate or to build robust
predictions through machine learning, which is the basic goal to break the
barriers we discussed. The 4th and 5th topics are a bonus allowing them to
understand what techniques data scientists would use, they would not need them
for opportunity identification but to extend their &amp;ldquo;internal model&amp;rdquo;, which can
only be beneficial.&lt;/p&gt;
&lt;h3 id=&#34;key-examples&#34;&gt;Key examples&lt;/h3&gt;
&lt;p&gt;These examples are taken from diverse projects, challenges and data sets
including some personal ones. Each case study is addressed to specific targets.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process, Energy and Chemical Engineers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I studied once the Combined Cycle Power Plant dataset which can be found on
the UCI dataset repository here. Using machine learning allowed the research
group not to work on the basis of restrictive hypotheses on the thermodynamic
behavior of the gas or steam, nor on the heat exchange and fluid mechanics
phenomena involved (e.g. pressure drop in the pipes due to phase change). The
predictions based on data are a totally new way to combine formal model-based
approaches (including process optimization) and operational realities (the
good old &amp;ldquo;gut feeling&amp;rdquo; experienced staff will tell you about).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Biomedical Engineers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This also includes all high-level medical professions. Well-known applications
were found in several fields, including pattern recognition from medical
images and data, disease risk estimations from patient background
information.&lt;/p&gt;
&lt;p&gt;Predictive modeling systems will be a decisive disruption in physicist work,
they replace the human decision-making process, based on few variables and on
a biased and relative experience with the risk-based optimal decision backed
by millions of data points.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Industrial, Manufacturing and Quality Engineers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those case studies are inspired by my personal experience and the solutions
offered by several software development companies.&lt;/p&gt;
&lt;p&gt;The first one is the application of classification trees to replace rules
defining the quality of a product (first, second class or discarded for
instance). Using proper data mining tools allows the production manager to
define the relative &amp;ldquo;cost&amp;rdquo; of false positives (good products declared as not
salable, which induces all the manufacturing costs without the revenue) and
false negatives (non-conform products sent to be sold, which induces a risk of
complaint, on operation product default, image issues or recall campaigns).&lt;/p&gt;
&lt;p&gt;The second example is combining time-series analysis and multi-variable
regression techniques to give risk estimations on the process stability and
trends. I observed several software solution providers to whom the transition
from statistics to predictive modeling was a simple and obvious evolution.&lt;/p&gt;
&lt;p&gt;Bringing machine learning to engineers is a challenge and must be considered
as a promising step for both data science and engineering. Formal modeling
approaches and experimental considerations will eventually be able to be
conciliated. Data science will gain a significant support and become an
accelerator for the development of new techniques.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re an engineer, a data scientist? Have you ever experienced collaborating
with engineers on data science applications? Did you encounter some
difficulties specific to working with engineers? Please get in touch for
further discussion on these topics.&lt;/p&gt;
&lt;p&gt;Now that we have discussed what data science could bring to engineers, a
second article may come to explain how to build a predictive model from
scratch in an industrial context.&lt;/p&gt;
&lt;p&gt;Special thanks to Robert, Benoit and Florian for their feedback on the article.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
